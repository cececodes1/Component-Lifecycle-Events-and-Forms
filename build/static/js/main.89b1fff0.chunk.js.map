{"version":3,"sources":["CharacterList.js","CharacterDetail.js","App.js","reportWebVitals.js","index.js"],"names":["CharacterList","_ref","onCharacterClick","characters","setCharacters","useState","useEffect","async","response","axios","get","data","results","error","console","fetchCharacters","React","createElement","className","map","character","key","id","onClick","name","src","thumbnail","path","extension","alt","CharacterDetail","characterId","characterDetail","setCharacterDetail","fetchCharacterDetail","description","comics","items","comic","index","App","selectedCharacterId","setSelectedCharacterId","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"6MAwCeA,MApCOC,IAA0B,IAAzBC,iBAAEA,GAAkBD,EACzC,MAAOE,EAAYC,GAAiBC,mBAAS,IAgB7C,OAdAC,oBAAU,KACgBC,WACtB,IACE,MAAMC,QAAiBC,IAAMC,IAC3B,+FAEFN,EAAcI,EAASG,KAAKA,KAAKC,SACjC,MAAOC,GACPC,QAAQD,MAAM,6BAA8BA,KAGhDE,IACC,IAGDC,IAAAC,cAAA,OAAKC,UAAU,kBACZf,EAAWgB,IAAKC,GACfJ,IAAAC,cAAA,OACEI,IAAKD,EAAUE,GACfJ,UAAU,iBACVK,QAASA,IAAMrB,EAAiBkB,EAAUE,KAE1CN,IAAAC,cAAA,UAAKG,EAAUI,MACfR,IAAAC,cAAA,OACEQ,OAAQL,EAAUM,UAAUC,QAAQP,EAAUM,UAAUE,YACxDC,IAAKT,EAAUI,WCMZM,MAnCS7B,IAAqB,IAApB8B,YAAEA,GAAa9B,EACtC,MAAO+B,EAAiBC,GAAsB5B,mBAAS,MAkBvD,OAhBAC,oBAAU,KACqBC,WAC3B,GAAIwB,EACF,IACE,MAAMvB,QAAiBC,IAAMC,uDACwBqB,iDAErDE,EAAmBzB,EAASG,KAAKA,KAAKC,QAAQ,IAC9C,MAAOC,GACPC,QAAQD,MAAM,oCAAqCA,KAIzDqB,IACC,CAACH,IAECC,EAGHhB,IAAAC,cAAA,OAAKC,UAAU,oBACbF,IAAAC,cAAA,UAAKe,EAAgBR,MACrBR,IAAAC,cAAA,SAAIe,EAAgBG,aAAe,6BACnCnB,IAAAC,cAAA,UAAI,WACJD,IAAAC,cAAA,UACGe,EAAgBI,OAAOC,MAAMlB,IAAI,CAACmB,EAAOC,IACxCvB,IAAAC,cAAA,MAAII,IAAKkB,GAAQD,EAAMd,SATF,MCDhBgB,MAhBf,WACE,MAAOC,EAAqBC,GAA0BrC,mBAAS,MAM/D,OACEW,IAAAC,cAAA,OAAKC,UAAU,OACbF,IAAAC,cAAA,UAAI,qBACJD,IAAAC,cAACjB,EAAa,CAACE,iBAPWoB,IAC5BoB,EAAuBpB,MAOpBmB,GAAuBzB,IAAAC,cAACa,EAAe,CAACC,YAAaU,MCJ7CE,MAZSC,IAClBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,UAAqBD,KAAK/C,IAAiD,IAAhDiD,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,QAAEA,GAASrD,EACpEiD,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAQV,MCDDW,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACH3C,IAAAC,cAACD,IAAM4C,WAAU,KACf5C,IAAAC,cAACuB,EAAG,QAORG","file":"static/js/main.89b1fff0.chunk.js","sourcesContent":["// CharacterList.js\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst CharacterList = ({ onCharacterClick }) => {\n  const [characters, setCharacters] = useState([]);\n\n  useEffect(() => {\n    const fetchCharacters = async () => {\n      try {\n        const response = await axios.get(\n          `https://gateway.marvel.com/v1/public/characters?ts=1&apikey=<YOURPUBLICKEY>&hash=<YOURHASH>`\n        );\n        setCharacters(response.data.data.results);\n      } catch (error) {\n        console.error(\"Error fetching characters:\", error);\n      }\n    };\n    fetchCharacters();\n  }, []);\n\n  return (\n    <div className=\"character-grid\">\n      {characters.map((character) => (\n        <div \n          key={character.id} \n          className=\"character-item\" \n          onClick={() => onCharacterClick(character.id)}\n        >\n          <h3>{character.name}</h3>\n          <img \n            src={`${character.thumbnail.path}.${character.thumbnail.extension}`} \n            alt={character.name} \n          />\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default CharacterList;\n","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst CharacterDetail = ({ characterId }) => {\n  const [characterDetail, setCharacterDetail] = useState(null);\n\n  useEffect(() => {\n    const fetchCharacterDetail = async () => {\n      if (characterId) {\n        try {\n          const response = await axios.get(\n            `https://gateway.marvel.com/v1/public/characters/${characterId}?ts=1&apikey=<YOURPUBLICKEY>&hash=<YOURHASH>`\n          );\n          setCharacterDetail(response.data.data.results[0]);\n        } catch (error) {\n          console.error(\"Error fetching character details:\", error);\n        }\n      }\n    };\n    fetchCharacterDetail();\n  }, [characterId]);\n\n  if (!characterDetail) return null;\n\n  return (\n    <div className=\"character-detail\">\n      <h2>{characterDetail.name}</h2>\n      <p>{characterDetail.description || \"No description available.\"}</p>\n      <h3>Comics:</h3>\n      <ul>\n        {characterDetail.comics.items.map((comic, index) => (\n          <li key={index}>{comic.name}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default CharacterDetail;\n","import React from 'react';\nimport CharacterList from './CharacterList';\nimport CharacterDetail from './CharacterDetail';\nimport { useState } from 'react';\n\nfunction App() {\n  const [selectedCharacterId, setSelectedCharacterId] = useState(null);\n\n  const handleCharacterClick = (id) => {\n    setSelectedCharacterId(id);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Marvel Characters</h1>\n      <CharacterList onCharacterClick={handleCharacterClick} />\n      {selectedCharacterId && <CharacterDetail characterId={selectedCharacterId} />}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}